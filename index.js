// Get our requirements, installed by npm
const Metalsmith  = require('metalsmith'),
    markdown    = require('metalsmith-markdown'),
    layouts     = require('metalsmith-layouts');
const sass = require('metalsmith-sass');
const default_values = require('metalsmith-default-values');
const permalinks = require('metalsmith-permalinks');
const discoverPartials = require('metalsmith-discover-partials')
const nested      = require('metalsmith-nested');
const prefixoid = require('metalsmith-prefixoid');
const links = require("metalsmith-relative-links");
const ancestry = require("metalsmith-ancestry");
const externalLinks = require("./lib/metalsmith-external-links");
const autoexcludePermalinks = require("./lib/metalsmith-autoexclude-permalinks");
const discoverHelpers = require('metalsmith-discover-helpers')
const autoDefaults = require("./lib/metalsmith-auto-defaults");
const php = require("./lib/metalsmith-php");
const ignore = require('metalsmith-ignore');

var site_url = "https://www.schildi.chat"
if (process.argv.length > 2) {
    site_url = process.argv[2];
}

var site_default_params = {
    title: "SchildiChat",
    description: "SchildiChat matrix messenger",
    layout: 'default.hbs',
    stylesheet: 'base.css',
    copyright_date: new Date().getFullYear(),
    is_subpage: true,
    parent_subpages: false,
    main_page: false,
    needs_link_to_top: true,
    order_id: 50,
    overview_list: false,
    hide_page_title: false,
    hidden: false
}

// Run Metalsmith in the current directory.
// When the .build() method runs, this reads
// and strips the frontmatter from each of our
// source files and passes it on to the plugins.
Metalsmith(__dirname)

    .metadata({
        site_url: site_url
    })

    .use(ignore(['**/.gitignore']))

    .use(php())

    // frontmatter (thing in markdown before actual markdown) default values
    .use(default_values([
        {
            pattern: '**/*.md',
            defaults: site_default_params
        },
        {
            pattern: '**/*.php',
            defaults: site_default_params
        }
    ]))

    .use(discoverHelpers())

    // Use metalsmith-markdown to convert
    // our source files' content from markdown
    // to HTML fragments.
    .use(markdown())

    // Allow nesting layouts // WARN: don't use layouts directory directly after that
    .use(nested({
        directory: 'layouts',
        generated: 'build-layouts'
    }))

    // Partials to include in layouts
    .use(discoverPartials({
        directory: 'partials',
        pattern: /\.hbs$/
    }))

    // Needs to be run before permalinks()
    .use(autoexcludePermalinks())

    .use(permalinks({
        duplicatesFail: true,
        relative: false // don't duplicate files
    }))

    // Ancestry allows access to parents and children. Links is a dependency.
    .use(links())
    .use(ancestry({
        sortBy: ["order_id", "title"]
    }))

    // My dynamic auto-defaults, to be called after default_values and ancestry
    .use(autoDefaults())

    // Put the HTML fragments from the steps above
    // into our template, using the Frontmatter
    // properties as template variables.
    .use(layouts({
        // Generated by nested
        directory: 'build-layouts',
    }))

    // After layouts, these might add some links as well
    .use(externalLinks({
        internal_url: [site_url]
    }))

    // sass -> css
    .use(sass())

    .use(prefixoid([{
            prefix: site_url,
            convert_relatives: true,
            tag: 'link',
            attr: 'href'
        }, {
            prefix: site_url,
            convert_relatives: true,
            tag: 'a',
            attr: 'href'
        }, {
            prefix: site_url,
            convert_relatives: true,
            tag: 'object',
            attr: 'data'
        }, {
            prefix: site_url,
            convert_relatives: true,
            tag: 'img',
            attr: 'src'
        }
    ]))

    // And tell Metalsmith to fire it all off.
    .build(function(err, files) {
        if (err) { throw err; }
    });
